#!/bin/bash

ADDOPT=""

. "${BASH_SOURCE%/*}/funcs.sh" "$1"

check_filesize() {
    FILE="$1.${FILEEXT}"
    MIN="$2"
    MAX="$3"

    if [ -z ${MAX}  ]
    then
        MAX=${MIN}
    fi

    SIZE=$(stat -c %s "${DIRNAME}/${FILE}")
    echo "File: ${FILE}"
    if [ ${MIN} -eq ${MAX} ]
    then
        echo "Size: ${SIZE} (expected ${MIN})"
    else
        echo "Size: ${SIZE} (expected ${MIN}...${MAX})"
    fi

    if [ ${SIZE} -ge ${MIN} -a ${SIZE} -le ${MAX} ]
    then
        echo "Pass"
    else
        echo "FAIL!"
        exit 1
    fi
}

# Ensure log contains file sizes, predicted and actual
printf "> TRANSCODING %s\n" snowboard.mp4.${FILEEXT}
cp -vpf "${DIRNAME}/snowboard.mp4.${FILEEXT}" "${TMPPATH}" > /dev/null
#cp -vpf "${DIRNAME}/snowboard.mp4.${FILEEXT}" "${TMPPATH}" > /dev/null

if [ "${DESTTYPE}" == "mp4" ];
then
    # mp4
    check_filesize "snowboard" 3827395
elif [ "${DESTTYPE}" == "webm" ];
then
    # webm
    check_filesize "snowboard.mp4" 4376074 48843897
elif [ "${DESTTYPE}" == "mov" ];
then
    # mov
    check_filesize "snowboard.mp4" 3843098 3912285
elif [ "${DESTTYPE}" == "prores" ];
then
    # prores
    check_filesize "snowboard.mp4" 158322250 160676826
elif [ "${DESTTYPE}" == "ts" ];
then
    # ts
    check_filesize "snowboard.mp4" 4192212 4324940
else
echo "Internal error, unknown type ${DESTTYPE}. Fix script!"
exit 99
fi

